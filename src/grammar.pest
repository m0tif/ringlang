program = _{ SOI ~ (stmt? ~ "\n")* ~ EOI }

stmt = _{ def | def_empty | assign }

expr    = { primary ~ (op ~ primary)* }
// there are two cases where we don't want
// to allow vector literals.
// 1. accessing a variable by index
// 2. specify the dimension of a variable
// both cases throw custom errors in parser.rs
primary = _{ parenth | atom | vector_lit }
parenth = { "(" ~ expr ~ ")" }

// vector literal may contain nested vectors
// to form a matrix or hypercube
vector_lit = { "[" ~ (expr ~ ",")* ~ expr ~ "]" }

op  = _{ add | sub | mul | inv }
add =  { "+" }
sub =  { "-" }
mul =  { "*" }
inv =  { "/" }

// we'll handle keyword checking in rust
// so we can output a more clean error
raw_type = @{ char+ }
def = { raw_type ~ varname ~ "=" ~ expr }

assign = { var ~ "=" ~ expr }

// if a colon is specified a shape must follow
def_empty = { raw_type ~ varname ~ (":" ~ type_shape+)? }
// compile time assertion: expr must consist of only statics
// e.g. shape must be fully resolvable at compile time
type_shape = _{ "[" ~ expr ~ "]" }

varname_index = _{ "[" ~ expr ~ "]" }
var = { varname ~ varname_index* }

atom = { literal_dec | var }

literal_dec = @{ ASCII_DIGIT+ }

varname = @{ char+ }

char = _{ ASCII_ALPHANUMERIC | "_" }

WHITESPACE = _{ " " }
COMMENT    = _{ "#" ~ (!"\n" ~ ANY)* }
